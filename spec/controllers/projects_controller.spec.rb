require 'spec_helper'


# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ProjectsController, :type => :controller do
   include IceCube

   before(:each) do
    @request.env["devise.mapping"] = Devise.mappings[:user]
    @user = FactoryGirl.create(:user)
    sign_in @user
  
    @context = FactoryGirl.create(:context, user_id: @user.id)
    @choretype = FactoryGirl.create(:choretype)
    @email = FactoryGirl.create(:email,user_id: @user.id)
    #$context = FactoryGirl.create(:context,user_id: $user.id)
  end

  # This should return the minimal set of attributes required to create a valid
  # Project. As you add validations to Project, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {"title" => "test title",
    "context_id" => 1,
    "user_id" => 1
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ProjecttypesController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do
    it "assigns only active projects as @projects" do
      project = FactoryGirl.create(:project,user_id: @user.id,context_id: @context.id)
      chore = FactoryGirl.create(:chore, project_id: project.id, email_id: @email.id, choretype_id: @choretype.id, user_id: @user.id)
      get :index, {"user_id" => 1,"context_id" => 1}, valid_session
      expect(assigns(:projects)).to eq([project])
      expect(assigns(:projects).length).to eq(1)
      expect(assigns(:chores)).to eq([chore])
      expect(assigns(:choretypes)).to eq([@choretype])
    end
  end

  describe "GET someday" do
    it "assigns only someday projects as @projects" do
      Project.create! valid_attributes
      project2 = Project.create!("title" => "test title 1", "context_id" => 1,"user_id" => 1, "someday" => true)
      get :someday, {"user_id" => 1,"context_id" => 1}, valid_session
      expect(assigns(:projects)).to eq([project2])
      expect(assigns(:projects).length).to eq(1)
    end
  end
  
  describe "GET show" do
    it "assigns the requested project as @project" do
      project = Project.create! valid_attributes
      get :show, {:id => project.to_param}, valid_session
      expect(assigns(:project)).to eq(project)
    end
  end

  describe "GET new" do
    it "assigns a new project as @project" do
      get :new, {}, valid_session
      expect(assigns(:project)).to  be_a_new(Project)
      #it also needs to prepare the list of emails and project for the select boxex
      expect(assigns(:contexts)).to eq([@context])
      expect(assigns(:projects).length).to eq(0)
    end
  end

  describe "GET edit" do
    it "assigns the requested project as @project" do
      project = Project.create! valid_attributes
      get :edit, {:id => project.to_param}, valid_session
      expect(assigns(:project)).to  eq(project)
     #it also needs to prepare the list of emails and project for the select boxex
      expect(assigns(:contexts)).to eq([@context])
      expect(assigns(:projects)).to eq([project])

    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Project" do
        expect {
          post :create, {:project => valid_attributes}, valid_session
        }.to change(Project, :count).by(1)
      end

      it "assigns a newly created project as @project" do
        post :create, {:project => valid_attributes}, valid_session
        expect(assigns(:project)).to  be_a(Project)
        expect(assigns(:project)).to  be_persisted
      end

      it "redirects to the created project" do
        post :create, {:project => valid_attributes}, valid_session
        expect(response).to redirect_to(Project.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved project as @project" do
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Project).to receive(:save).and_return(false)
        post :create, {:project => { "title" => "invalid value" }}, valid_session
        expect(assigns(:project)).to be_a_new(Project)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Project).to receive(:save).and_return(false)
        post :create, {:project => { "title" => "invalid value" }}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested project" do
        project = Project.create! valid_attributes
 
       put :update, {:id => project.to_param, :project => { "title" => "new project"}}, valid_session 
      expect(assigns(:project)).to eq(project)
      end

      it "assigns the requested project as @project" do
        project = Project.create! valid_attributes
        put :update, {:id => project.to_param, :project => valid_attributes}, valid_session
        expect(assigns(:project)).to eq(project)
      end

      it "redirects to the project" do
        project = Project.create! valid_attributes
        put :update, {:id => project.to_param, :project => valid_attributes}, valid_session
        expect(response).to redirect_to(project)
      end
    end

    describe "with invalid params" do
      it "assigns the project as @project" do
        project = Project.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Project).to receive(:save).and_return(false)
        put :update, {:id => project.to_param, :project => { "title" => "wrong title" }}, valid_session
        expect(assigns(:project)).to  eq(project)
      end

      it "re-renders the 'edit' template" do
        project = Project.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Project).to receive(:save).and_return(false)
        put :update, {:id => project.to_param, :project => { "title" => "wrong title" }}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested projecttype" do
      project = Project.create! valid_attributes
      expect {
        delete :destroy, {:id => project.to_param}, valid_session
      }.to change(Project, :count).by(-1)
    end

    it "redirects to the projecttypes list" do
      project = Project.create! valid_attributes
      delete :destroy, {:id => project.to_param}, valid_session
      expect(response).to redirect_to(projects_url)
    end
  end

end
